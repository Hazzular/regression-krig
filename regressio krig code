library(rgdal)
library(raster)
library(sp)
if(!dir.exists("./data-raw")) dir.create("./data-raw")
download.file("https://github.com/Hazzular/regression-krig.git", "./data-raw/regression-krig.git", method = "auto")
#add soil points
soil <- read.delim2("element.txt",sep= '\t')
proj4str<-"+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
soil$Y <- as.numeric(as.character(soil$Y))
soil$X <- as.numeric(as.character(soil$X))
statpoints <-SpatialPointsDataFrame(coords = soil[,c("X", "Y")],
                                    data= soil,
                                    proj4string = CRS(proj4str))


#formatdata
soil$slope <- as.numeric(as.factor(soil$slope))
soil$Apspect <- as.numeric(as.factor(soil$Apspect))
soil$Elevation.1 <- as.numeric(as.integer(soil$Elevation.1))


#generate the kfold train data 10-fold
kfoldSplit <- function(x, k=195, train=TRUE){
  x <- sample(x, size = length(x), replace = FALSE)
  out <- suppressWarnings(split(x, factor(1:k)))
  if(train) out <- lapply(out, FUN = function(x, len) (1:len)[-x], len=length(unlist(out)))
  return(out)
}
# Regression residuals from RF object
resid.RF <- function(x) return(x$y - x$predicted)
#creating store of rmse values
set.seed(12345)

k <- 195

kfolds <- kfoldSplit(1:nrow(soil), k = 195, train = TRUE)

evalData <- matrix(NA, nrow=k, ncol=7, 
                   dimnames = list(1:k, c("OK","RF","GLM","GAM","RF_OK","GLM_OK","GAM_OK")))
#adding mean error matrix
Medata <- matrix(NA, nrow=k, ncol=7, dimnames = list(1:k, c("OK","RF","GLM","GAM","RF_OK","GLM_OK","GAM_OK")))
#modelling

library(randomForest)
library(mgcv)
library(gstat)

#loop for what the results will print the data divided in 10 fold
for(i in 1:k){
  
  cat("K-fold...",i,"of",k,"....\n")
  # TRAIN indices as integer
  idx <- kfolds[[i]]
  # TRAIN indices as a boolean vector
  idxBool <- (1:nrow(soil)) %in% idx
  
  #Observed test data for the target variable
  obs.test <- soil[!idxBool, "Na"]
 
  
  
  #ordinary kriging
  #making a variogram 
  formMod <- Na~1
  mod <- vgm(model  = "Gau", psill  = 3, range  = 100, nugget = 0.3)
  variog <- variogram(formMod, statpoints[idxBool, ])
  # Variogram fitting by Ordinary Least Sqaure
  variogFitOLS<-fit.variogram(variog, model = mod,  fit.method = 6)
  plot(variog, variogFitOLS, main="OLS Model")
  
  #kriging predicitons 
  OK <- krige(formula = formMod ,
              locations = statpoints[idxBool, ], 
              model = variogFitOLS,
              newdata = statpoints[!idxBool, ],
              debug.level = 0)
  #WORKING OUT THE RMSE VALUE
  ok.pred.test <- OK@data$var1.pred
  evalData[i,"OK"] <- sqrt(mean((ok.pred.test - obs.test)^2))

  
  
  
  #rf 
  RF <- randomForest(y = soil[idx, "Na"],
                     x = soil[idx, c("slope", "Elevation.1", "Apspect")],
                     ntree = 500,
                     mtry = 2)
  
  rf.pred.test <- predict(RF, newdata = soil[-idx,], type="response")
  evalData[i,"RF"] <- sqrt(mean((rf.pred.test - obs.test)^2))

  
  #OK of RF residuals
  statPointsTMP <- statpoints[idxBool, ]
  statPointsTMP@data <- cbind(statPointsTMP@data, residRF = resid.RF(RF))
  formMod <- residRF ~ 1
  mod <- vgm(model  = "Exp", psill  = 0.6, range  = 10, nugget = 0.01)
  variog <- variogram(formMod, statPointsTMP)
  
  # Variogram fitting by Ordinary Least Sqaure
  variogFitOLS<-fit.variogram(variog, model = mod,  fit.method = 6)
  plot(variog, variogFitOLS, main="OLS Model")
  
  #kriging predictions
  RF.OK <- krige(formula = formMod ,
                 locations = statPointsTMP, 
                 model = variogFitOLS,
                 newdata = statpoints[!idxBool, ],
                 debug.level = 0)
  
  rf.ok.pred.test <- rf.pred.test + RF.OK@data$var1.pred
  evalData[i,"RF_OK"] <- sqrt(mean((rf.ok.pred.test - obs.test)^2))
  
  #GLM
  GLM <- glm(formula = Na ~ Elevation.1 + Apspect + slope, data = soil[idx, ])
  glm.pred.test <- predict(GLM, newdata = soil[-idx,], type="response")
  evalData[i,"GLM"] <- sqrt(mean((glm.pred.test - obs.test)^2))
  
  #OK of GLM residuals
  statPointsTMP <- statpoints[idxBool, ]
  statPointsTMP@data <- cbind(statPointsTMP@data, residGLM = resid(GLM))
  formMod <- residGLM ~ 1
  mod <- vgm(model  = "Exp", psill  = 0.4, range  = 10, nugget = 0.01)
  variog <- variogram(formMod, statPointsTMP)
  variogFitOLS<-fit.variogram(variog, model = mod,  fit.method = 6)
  plot(variog, variogFitOLS, main="OLS Model")
  GLM.OK <- krige(formula = formMod ,
                  locations = statPointsTMP, 
                  model = variogFitOLS,
                  newdata = statpoints[!idxBool, ],
                  debug.level = 0)
  glm.ok.pred.test <- glm.pred.test + GLM.OK@data$var1.pred
  evalData[i,"GLM_OK"] <- sqrt(mean((glm.ok.pred.test - obs.test)^2))
 
  
  #GAM
  GAM <- gam(formula = Na ~ s(Elevation.1) + s(Apspect) + s(slope), data = soil[idx, ])
  gam.pred.test <- predict(GAM, newdata = soil[-idx,], type="response")
  evalData[i,"GAM"] <- sqrt(mean((gam.pred.test - obs.test)^2))
 
  # Ordinary Kriging of GAM residuals
  
  statPointsTMP <- statpoints[idxBool, ]
  statPointsTMP@data <- cbind(statPointsTMP@data, residGAM = resid(GAM))
  formMod <- residGAM ~ 1
  mod <- vgm(model  = "Exp", psill  = 0.3, range  = 10, nugget = 0.01)
  variog <- variogram(formMod, statPointsTMP)
  variogFitOLS<-fit.variogram(variog, model = mod,  fit.method = 6)
  plot(variog, variogFitOLS, main="OLS Model")
  # kriging predictions
  GAM.OK <- krige(formula = formMod ,
                  locations = statPointsTMP, 
                  model = variogFitOLS,
                  newdata = statpoints[!idxBool, ],
                  debug.level = 0)
  
  gam.ok.pred.test <- gam.pred.test + GAM.OK@data$var1.pred
  evalData[i,"GAM_OK"] <- sqrt(mean((gam.ok.pred.test - obs.test)^2))


  }
round(apply(evalData,2,FUN = function(x,...) c(mean(x,...),sd(x,...))),3)
